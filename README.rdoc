= quark

*Quark* encapsulates the Friendster v1 API for Project Neutron.

== Installation

There are two ways to install Quark:

# Run +rake build+ and install the generated gem.

# Add Quark as a git submodule in your project.

== Usage

=== Establishing a Session

How to obtain a valid session key:

==== Canvas Page

Applications displayed on their canvas page automatically receive a valid
session key and the associated user ID as parameters.

  client = Quark::Client.new(:api_key => your_api_key, :api_secret => your_api_secret)
  session = client.create_session(:session_key => session_key, :uid => uid)

=== Invoking Convenience API Calls

==== User Albums
Retrieves the album list of the current user.

  session.albums # returns an array
  => [{"aid"=>"11111",  
  "cover_pid"=>"22222", 
  "owner"=>"33333", 
  "name"=>"Sample Album", 
  "created"=>1250590404, 
  "modified"=>1260846943, 
  "description"=>"sample", 
  "isprivate"=>"0", 
  "link"=>"http://www.friendster.com/viewphotos.php?a=11111&uid=33333", 
  "size"=>"4"}
  ]
  
==== User Photos

Retrieves the photo list given a specific album id.
  
  session.photos(album_id = 1234) # returns an array
  => [{"pid"=>"11111", 
  "aid"=>"22222", 
  "owner"=>"33333", 
  "src"=>"http://photos.friendster.com/photos/11/22/33333/12345678m.jpg", 
  "src_small"=>"http://photos.friendster.com/photos/11/22/33333/12345678s.jpg", 
  "src_big"=>"http://photos.friendster.com/photos/11/22/33333/12345678l.jpg", 
  "link"=>"http://photos.friendster.com/photos/11/22/33333/12345678", 
  "caption"=>"", 
  "created"=>1272252629, 
  "is_grabbed"=>"0"},
  {"pid"=>"11112", 
  "aid"=>"22222", 
  "owner"=>"33333", 
  "src"=>"http://photos.friendster.com/photos/11/22/33333/123456789m.jpg", 
  "src_small"=>"http://photos.friendster.com/photos/11/22/33333/123456789s.jpg", 
  "src_big"=>"http://photos.friendster.com/photos/11/22/33333/123456789l.jpg", 
  "link"=>"http://photos.friendster.com/photos/11/22/33333/123456789", 
  "caption"=>"", 
  "created"=>1272252630, 
  "is_grabbed"=>"0"},
  ]
  
==== User Photo

Retrieves the photo details given a specific photo id

  session.photo(photo_id = 11111) # returns a hash
  => {"pid"=>"11111", 
  "aid"=>"22222", 
  "owner"=>"33333", 
  "src"=>"http://photos.friendster.com/photos/11/22/33333/12345678m.jpg", 
  "src_small"=>"http://photos.friendster.com/photos/11/22/33333/12345678s.jpg", 
  "src_big"=>"http://photos.friendster.com/photos/11/22/33333/12345678l.jpg", 
  "link"=>"http://photos.friendster.com/photos/11/22/33333/12345678", 
  "caption"=>"", 
  "created"=>1272252629, 
  "is_grabbed"=>"0"}
  
==== User Primary Photo

Retrieves the primary photo of the current user.

  session.primary_photo # returns a hash
  => {"pid"=>"11111", 
  "aid"=>"22222", 
  "owner"=>"33333", 
  "src"=>"http://photos.friendster.com/photos/11/22/33333/12345678m.jpg", 
  "src_small"=>"http://photos.friendster.com/photos/11/22/33333/12345678s.jpg", 
  "src_big"=>"http://photos.friendster.com/photos/11/22/33333/12345678l.jpg", 
  "link"=>"http://photos.friendster.com/photos/11/22/33333/12345678", 
  "caption"=>"", 
  "created"=>1272252629, 
  "is_grabbed"=>"0"}
  
==== User Information

Retrieves the user information of the current user.

  session.user # returns a hash
  => {"uid"=>"22222", 
  "first_name"=>"Sample", "last_name"=>"API", 
  "url"=>"http://profiles.friendster.com/22222", 
  "primary_photo_url"=>"http://photos.friendster.com/photos/11/22/33333/12345678m.jpg", 
  "location"=>{"country"=>"Philippines", "state"=>"Metro Manila", "city"=>"Makati", "zip"=>"1212"}, 
  "hometown"=>"", 
  "user_type"=>"Normal", 
  "fan_profile_type"=>"None", 
  "fan_profile_category"=>"None", 
  "relationship_status"=>"It's Complicated TM", 
  "gender"=>"Male", 
  "member_since"=>{"year"=>"2007", "month"=>"05"}, 
  "interested_in"=>{"interest"=>["Friends"]}, 
  "occupation"=>"", 
  "companies"=>nil, 
  "hobbies_and_interests"=>nil, 
  "affiliations"=>nil, 
  "college_list"=>[], 
  "school_list"=>[], 
  "school_other"=>nil, 
  "favorites"=>{"books"=>nil, "movies"=>nil, "music"=>nil, "tv_shows"=>nil}, 
  "about_me"=>"", 
  "want_to_meet"=>"", 
  "birthday"=>{"year"=>"1970", "month"=>"01", "day"=>"01"}}

=== Invoking Direct API Calls

You can call APIs directly and access the raw response by specifying the +resource+ and +params+.

The snippet below is similar with Quark::Session#user that retrieves user information BUT returns the unparsed response.
  response = session.get(:resource => 'user')
  => #<Curl::Easy http://www.friendster.com/v1/user?api_key=718fb3449>

For convenience, Quark uses JSON format by default, but you can also specify XML format.

  response = session.get(:resource => 'user', :params => {:format => 'json'})
  => #<Curl::Easy http://www.friendster.com/v1/user?api_key=718fb3449>
  JSON.parse(response.body)
  response = session.get(:resource => 'user', :params => {:format => 'xml'})
  => #<Curl::Easy http://www.friendster.com/v1/user?api_key=718fb3449>
  Nokogiri::XML(response.body)

You can pass as many +params+ as needed, depending on the +resource+ you use.

  response = session.get(:resource => 'photos', :params => {:aid => '22222', :format => 'xml'})
  => #<Curl::Easy http://www.friendster.com/v1/user?api_key=718fb3449>

== Copyright

Copyright (c) 2010-2011 Friendster, Inc.
